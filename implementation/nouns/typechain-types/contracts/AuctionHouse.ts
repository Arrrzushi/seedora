/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AuctionHouseInterface extends utils.Interface {
  functions: {
    "auctions(uint256)": FunctionFragment;
    "createAuction(uint256,uint256)": FunctionFragment;
    "createBid(uint256)": FunctionFragment;
    "defaultMinBidIncrementPercentage()": FunctionFragment;
    "defaultReservePrice()": FunctionFragment;
    "duration()": FunctionFragment;
    "getCurrentPrice(uint256)": FunctionFragment;
    "getTWAP(uint256)": FunctionFragment;
    "nftContract()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDefaultMinBidIncrementPercentage(uint256)": FunctionFragment;
    "setDefaultReservePrice(uint256)": FunctionFragment;
    "setTimeBuffer(uint256)": FunctionFragment;
    "settleAuction(uint256)": FunctionFragment;
    "timeBuffer()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "twapPeriod()": FunctionFragment;
    "twapPrices(uint256)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctions"
      | "createAuction"
      | "createBid"
      | "defaultMinBidIncrementPercentage"
      | "defaultReservePrice"
      | "duration"
      | "getCurrentPrice"
      | "getTWAP"
      | "nftContract"
      | "onERC721Received"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setDefaultMinBidIncrementPercentage"
      | "setDefaultReservePrice"
      | "setTimeBuffer"
      | "settleAuction"
      | "timeBuffer"
      | "transferOwnership"
      | "twapPeriod"
      | "twapPrices"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultMinBidIncrementPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultReservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTWAP",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMinBidIncrementPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultReservePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeBuffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "settleAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "twapPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "twapPrices",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultMinBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTWAP", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMinBidIncrementPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultReservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timeBuffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twapPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "twapPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AuctionBid(uint256,address,uint256,bool)": EventFragment;
    "AuctionCreated(uint256,uint256,uint256,uint256)": EventFragment;
    "AuctionExtended(uint256,uint256)": EventFragment;
    "AuctionMinBidIncrementUpdated(uint256)": EventFragment;
    "AuctionReservePriceUpdated(uint256)": EventFragment;
    "AuctionSettled(uint256,address,uint256)": EventFragment;
    "AuctionTimeBufferUpdated(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionExtended"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AuctionMinBidIncrementUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionReservePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionTimeBufferUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AuctionBidEventObject {
  tokenId: BigNumber;
  sender: string;
  value: BigNumber;
  extended: boolean;
}
export type AuctionBidEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean],
  AuctionBidEventObject
>;

export type AuctionBidEventFilter = TypedEventFilter<AuctionBidEvent>;

export interface AuctionCreatedEventObject {
  tokenId: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
  reservePrice: BigNumber;
}
export type AuctionCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionCreatedEventObject
>;

export type AuctionCreatedEventFilter = TypedEventFilter<AuctionCreatedEvent>;

export interface AuctionExtendedEventObject {
  tokenId: BigNumber;
  endTime: BigNumber;
}
export type AuctionExtendedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionExtendedEventObject
>;

export type AuctionExtendedEventFilter = TypedEventFilter<AuctionExtendedEvent>;

export interface AuctionMinBidIncrementUpdatedEventObject {
  minBidIncrement: BigNumber;
}
export type AuctionMinBidIncrementUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionMinBidIncrementUpdatedEventObject
>;

export type AuctionMinBidIncrementUpdatedEventFilter =
  TypedEventFilter<AuctionMinBidIncrementUpdatedEvent>;

export interface AuctionReservePriceUpdatedEventObject {
  reservePrice: BigNumber;
}
export type AuctionReservePriceUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionReservePriceUpdatedEventObject
>;

export type AuctionReservePriceUpdatedEventFilter =
  TypedEventFilter<AuctionReservePriceUpdatedEvent>;

export interface AuctionSettledEventObject {
  tokenId: BigNumber;
  winner: string;
  amount: BigNumber;
}
export type AuctionSettledEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  AuctionSettledEventObject
>;

export type AuctionSettledEventFilter = TypedEventFilter<AuctionSettledEvent>;

export interface AuctionTimeBufferUpdatedEventObject {
  timeBuffer: BigNumber;
}
export type AuctionTimeBufferUpdatedEvent = TypedEvent<
  [BigNumber],
  AuctionTimeBufferUpdatedEventObject
>;

export type AuctionTimeBufferUpdatedEventFilter =
  TypedEventFilter<AuctionTimeBufferUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface AuctionHouse extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionHouseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        tokenId: BigNumber;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        bidder: string;
        settled: boolean;
        reservePrice: BigNumber;
        minBidIncrementPercentage: BigNumber;
      }
    >;

    createAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      customReservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defaultMinBidIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    defaultReservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTWAP(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nftContract(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDefaultReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    twapPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    twapPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  auctions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      BigNumber,
      BigNumber
    ] & {
      tokenId: BigNumber;
      amount: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      bidder: string;
      settled: boolean;
      reservePrice: BigNumber;
      minBidIncrementPercentage: BigNumber;
    }
  >;

  createAuction(
    tokenId: PromiseOrValue<BigNumberish>,
    customReservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defaultMinBidIncrementPercentage(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  defaultReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTWAP(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nftContract(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultMinBidIncrementPercentage(
    _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDefaultReservePrice(
    _reservePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeBuffer(
    _timeBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleAuction(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  twapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  twapPrices(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        BigNumber,
        BigNumber
      ] & {
        tokenId: BigNumber;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        bidder: string;
        settled: boolean;
        reservePrice: BigNumber;
        minBidIncrementPercentage: BigNumber;
      }
    >;

    createAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      customReservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    defaultMinBidIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTWAP(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDefaultMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDefaultReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    twapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    twapPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuctionBid(uint256,address,uint256,bool)"(
      tokenId?: null,
      sender?: null,
      value?: null,
      extended?: null
    ): AuctionBidEventFilter;
    AuctionBid(
      tokenId?: null,
      sender?: null,
      value?: null,
      extended?: null
    ): AuctionBidEventFilter;

    "AuctionCreated(uint256,uint256,uint256,uint256)"(
      tokenId?: null,
      startTime?: null,
      endTime?: null,
      reservePrice?: null
    ): AuctionCreatedEventFilter;
    AuctionCreated(
      tokenId?: null,
      startTime?: null,
      endTime?: null,
      reservePrice?: null
    ): AuctionCreatedEventFilter;

    "AuctionExtended(uint256,uint256)"(
      tokenId?: null,
      endTime?: null
    ): AuctionExtendedEventFilter;
    AuctionExtended(tokenId?: null, endTime?: null): AuctionExtendedEventFilter;

    "AuctionMinBidIncrementUpdated(uint256)"(
      minBidIncrement?: null
    ): AuctionMinBidIncrementUpdatedEventFilter;
    AuctionMinBidIncrementUpdated(
      minBidIncrement?: null
    ): AuctionMinBidIncrementUpdatedEventFilter;

    "AuctionReservePriceUpdated(uint256)"(
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;
    AuctionReservePriceUpdated(
      reservePrice?: null
    ): AuctionReservePriceUpdatedEventFilter;

    "AuctionSettled(uint256,address,uint256)"(
      tokenId?: null,
      winner?: null,
      amount?: null
    ): AuctionSettledEventFilter;
    AuctionSettled(
      tokenId?: null,
      winner?: null,
      amount?: null
    ): AuctionSettledEventFilter;

    "AuctionTimeBufferUpdated(uint256)"(
      timeBuffer?: null
    ): AuctionTimeBufferUpdatedEventFilter;
    AuctionTimeBufferUpdated(
      timeBuffer?: null
    ): AuctionTimeBufferUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      customReservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defaultMinBidIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    defaultReservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTWAP(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftContract(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDefaultReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    twapPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    twapPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      customReservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defaultMinBidIncrementPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultReservePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentPrice(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTWAP(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultMinBidIncrementPercentage(
      _minBidIncrementPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDefaultReservePrice(
      _reservePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeBuffer(
      _timeBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleAuction(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    twapPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapPrices(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
